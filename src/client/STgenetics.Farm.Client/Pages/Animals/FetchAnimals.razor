@page "/animals"
@using MudBlazor;
@using STgenetics.Farm.Application.Dtos.Common.Paginated;
@using STgenetics.Farm.Client.Models.Response;
@using STgenetics.Farm.Client.Repository;

<h1>Animals</h1>

<MudTable ServerData="@(new Func<TableState, Task<TableData<AnimalResponse>>>(GetServerData))"
          Hover="true" Breakpoint="Breakpoint.Sm" @ref="animalsTable" RowsPerPage="10">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Animals</MudText>
        <MudSpacer></MudSpacer>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="id" T="AnimalResponse">Id</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="name" T="AnimalResponse">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="breed" T="AnimalResponse">Breed</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="price" T="AnimalResponse">Price</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="birthday" T="AnimalResponse">Birthday</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="isActive" T="AnimalResponse">IsActive</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Breed">@context.Breed</MudTd>
        <MudTd DataLabel="Price">$@context.Price</MudTd>
        <MudTd DataLabel="Birthday">@context.Birthday.ToString("dd-MM-yyyy")</MudTd>
        <MudTd DataLabel="IsActive">@context.IsActive?"Yes":"No"</MudTd>


    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="@pageSizeOption" RowsPerPageString="Animals per page" />
    </PagerContent>
</MudTable>


@code {

    private MudTable<AnimalResponse> animalsTable;
    private SearchParameters searchParameters = new SearchParameters();
    private readonly int[] pageSizeOption = { 10, 20, 50 };

    [Inject]
    public IAnimalsRepository animalsRepository { get; set; }

    private async Task<TableData<AnimalResponse>> GetServerData(TableState state)
    {
        searchParameters.PageSize = state.PageSize;
        searchParameters.PageNumber = state.Page + 1;

        var response = await animalsRepository.GetAnimals(searchParameters);

        return new TableData<AnimalResponse>
            {
                Items = response.Items,
                TotalItems = response.MetaData.TotalCount
            };
    }

}
